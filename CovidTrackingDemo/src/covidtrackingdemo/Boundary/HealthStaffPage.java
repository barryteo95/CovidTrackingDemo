/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package covidtrackingdemo.Boundary;

import covidtrackingdemo.Controller.HealthStaff.UpdateVacStatusCtrler;
import covidtrackingdemo.Controller.HealthStaff.UpdateInfStatusCtrler;
import covidtrackingdemo.Controller.HealthStaff.ShowHealthRecCtrler;
import covidtrackingdemo.Controller.HealthStaff.SendExpAlertCtrler;
import covidtrackingdemo.Controller.HealthStaff.SendInfAlertCtrler;
import covidtrackingdemo.Controller.HealthStaff.SendVacAlertCtrler;
import covidtrackingdemo.Entity.PublicUser;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author barry
 */
public class HealthStaffPage extends javax.swing.JFrame {
            
    private String currentUser;
    
    public HealthStaffPage() throws IOException {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        headerLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        hsUsernameLabel = new javax.swing.JLabel();
        puUsernameLabel = new javax.swing.JLabel();
        vacStatusLabel = new javax.swing.JLabel();
        vacDateLabel = new javax.swing.JLabel();
        infStatusLabel = new javax.swing.JLabel();
        hsUsernameField = new javax.swing.JTextField();
        puUsernameField = new javax.swing.JTextField();
        infDateLabel = new javax.swing.JLabel();
        infDateField = new com.toedter.calendar.JDateChooser();
        vacDateField = new com.toedter.calendar.JDateChooser();
        infStatusYesBtn = new javax.swing.JRadioButton();
        infStatusNoBtn = new javax.swing.JRadioButton();
        vacStatusYesBtn = new javax.swing.JRadioButton();
        vacStatusNoBtn = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        healthRecTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        updateBtn = new javax.swing.JButton();
        logoutBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        sendExpAlertBtn = new javax.swing.JButton();
        expAlertDateLabel = new javax.swing.JLabel();
        expAlertDateField = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMinimumSize(new java.awt.Dimension(127, 400));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 204, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(120, 120));

        headerLabel.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        headerLabel.setForeground(new java.awt.Color(255, 255, 255));
        headerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        headerLabel.setText("HEALTH STAFF");
        headerLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        headerLabel.setPreferredSize(new java.awt.Dimension(127, 48));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 824, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setPreferredSize(new java.awt.Dimension(312, 200));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        hsUsernameLabel.setText("Health Staff Username");
        hsUsernameLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        jPanel2.add(hsUsernameLabel, gridBagConstraints);

        puUsernameLabel.setText("Public User Username");
        puUsernameLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 15);
        jPanel2.add(puUsernameLabel, gridBagConstraints);

        vacStatusLabel.setText("Vaccination Status");
        vacStatusLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 15);
        jPanel2.add(vacStatusLabel, gridBagConstraints);

        vacDateLabel.setText("Vaccination Date");
        vacDateLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 15);
        jPanel2.add(vacDateLabel, gridBagConstraints);

        infStatusLabel.setText("Infection Status");
        infStatusLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 15);
        jPanel2.add(infStatusLabel, gridBagConstraints);

        hsUsernameField.setPreferredSize(new java.awt.Dimension(100, 30));
        hsUsernameField.setEditable(false);
        hsUsernameField.setBackground(new Color(224,224,224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel2.add(hsUsernameField, gridBagConstraints);

        puUsernameField.setPreferredSize(new java.awt.Dimension(100, 30));
        puUsernameField.setEditable(false);
        puUsernameField.setBackground(new Color(224,224,224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(puUsernameField, gridBagConstraints);

        infDateLabel.setText("Infection Date");
        infDateLabel.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 15);
        jPanel2.add(infDateLabel, gridBagConstraints);

        infDateField.setDateFormatString("dd/MM/yyyy");
        infDateField.setEnabled(false);
        infDateField.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(infDateField, gridBagConstraints);

        vacDateField.setDateFormatString("dd/MM/yyyy");
        vacDateField.setEnabled(false);
        vacDateField.setPreferredSize(new java.awt.Dimension(100, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(vacDateField, gridBagConstraints);

        buttonGroup1.add(infStatusYesBtn);
        infStatusYesBtn.setText("Yes");
        infStatusYesBtn.setPreferredSize(new java.awt.Dimension(50, 30));
        infStatusYesBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                infStatusListener(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(infStatusYesBtn, gridBagConstraints);

        buttonGroup1.add(infStatusNoBtn);
        infStatusNoBtn.setSelected(true);
        infStatusNoBtn.setText("No");
        infStatusNoBtn.setPreferredSize(new java.awt.Dimension(50, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(infStatusNoBtn, gridBagConstraints);

        buttonGroup2.add(vacStatusYesBtn);
        vacStatusYesBtn.setText("Yes");
        vacStatusYesBtn.setPreferredSize(new java.awt.Dimension(50, 30));
        vacStatusYesBtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                vacStatusListener(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(vacStatusYesBtn, gridBagConstraints);

        buttonGroup2.add(vacStatusNoBtn);
        vacStatusNoBtn.setSelected(true);
        vacStatusNoBtn.setText("No");
        vacStatusNoBtn.setPreferredSize(new java.awt.Dimension(50, 30));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        jPanel2.add(vacStatusNoBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 15);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setPreferredSize(new java.awt.Dimension(472, 264));

        healthRecTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "VaccinatedBy", "VaccinationStatus", "VaccinationDate", "DeterminedBy", "InfectionStatus", "InfectionDate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        healthRecTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clickHealthRec(evt);
            }
        });
        jScrollPane2.setViewportView(healthRecTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(167, 167, 167))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        updateBtn.setText("UPDATE");
        updateBtn.setPreferredSize(new java.awt.Dimension(98, 23));
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanel4.add(updateBtn, gridBagConstraints);

        logoutBtn.setText("LOGOUT");
        logoutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        logoutBtn.setPreferredSize(new java.awt.Dimension(252, 23));
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logout(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        jPanel4.add(logoutBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 15);
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel5.setPreferredSize(new java.awt.Dimension(472, 74));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        sendExpAlertBtn.setText("SEND EXPOSURE ALERTS");
        sendExpAlertBtn.setPreferredSize(new java.awt.Dimension(500, 23));
        sendExpAlertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendExpAlert(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(7, 10, 3, 10);
        jPanel5.add(sendExpAlertBtn, gridBagConstraints);

        expAlertDateLabel.setText("Exposure alert date : ");
        expAlertDateLabel.setPreferredSize(new java.awt.Dimension(107, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 16, 0);
        jPanel5.add(expAlertDateLabel, gridBagConstraints);

        expAlertDateField.setText("jLabel9");
        expAlertDateField.setPreferredSize(new java.awt.Dimension(35, 23));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 16, 0);
        jPanel5.add(expAlertDateField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 15);
        getContentPane().add(jPanel5, gridBagConstraints);

        welcomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        welcomeLabel.setText("Welcome, Test");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 15, 0);
        getContentPane().add(welcomeLabel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void setUsername(String username) throws IOException {
        
        welcomeLabel.setText("Welcome, " + username);
        
        this.currentUser = username;
        
        hsUsernameField.setText(username);
        
        showHealthRec(); 
    }
    
    private void update(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update
        
        int i = healthRecTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) healthRecTable.getModel();

        // Convert Vaccination/ Infection String to String (Y/N)
        String vacStatus;
        String infStatus;

        if (vacStatusYesBtn.isSelected()) {
            vacStatus = "Yes";
        }
        
        else {
            vacStatus = "No"; 
        }
        
        if (infStatusYesBtn.isSelected()) {
            infStatus = "Yes";
        }
        
        else {
            infStatus = "No"; 
        }

        // Convert Vaccination/ Infection Date to String Type
        
        String recordVacDate = model.getValueAt(i,3).toString();
        String recordInfDate = model.getValueAt(i,6).toString();

        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        String fieldVacDate = dateFormat.format(vacDateField.getDate());
        String fieldInfDate = dateFormat.format(infDateField.getDate());
        
        // If Vaccination Date is Updated

        if (!recordVacDate.equals(fieldVacDate)) {
            
            int confirmationNumber = JOptionPane.showConfirmDialog(this ,"Vaccination Notification Alert will be sent upon update. Proceed?", "",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

            // If User agrees to Update Vac with Send Alert
            
            if (confirmationNumber == 0) {
            
                UpdateVacStatusCtrler uvc = new UpdateVacStatusCtrler();

                SendVacAlertCtrler svc = new SendVacAlertCtrler();

                try {
                    
                    int validationNumber = uvc.updateVacStatus(hsUsernameField.getText(), puUsernameField.getText(),
                            vacStatus, vacDateField.getDate(), infStatus, infDateField.getDate());

                    if (validationNumber == 0) {
                        
                        svc.sendVacAlert(puUsernameField.getText(), "vaccination", vacDateField.getDate());

                        model.setRowCount(0);

                        showHealthRec();
                    }
                } 
                catch (IOException ex) {
                    
                    Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        // Else-If Infection Date is Updated

        else if (!recordInfDate.equals(fieldInfDate)) {

            int confirmationNumber = JOptionPane.showConfirmDialog(this ,"Infection Notification Alert will be sent upon update. Proceed?", "",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE);

            // If User agrees to Update Inf with Send Alert

            if (confirmationNumber == 0) {
                 
                UpdateInfStatusCtrler uic = new UpdateInfStatusCtrler();

                SendInfAlertCtrler sic = new SendInfAlertCtrler();


                try {

                    int validationNumber = uic.updateInfStatus(hsUsernameField.getText(), puUsernameField.getText(), 
                        vacStatus, vacDateField.getDate(), infStatus, infDateField.getDate());

                    if (validationNumber == 0) {

                        sic.sendInfAlert(puUsernameField.getText(), "infection", infDateField.getDate());

                        model.setRowCount(0);

                        showHealthRec();
                    }
                } 
                
                catch (IOException ex) {
                    
                    Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_update

    private void clickHealthRec(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clickHealthRec

        int i = healthRecTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) healthRecTable.getModel();

        // Populate PU Username
      
        puUsernameField.setText(model.getValueAt(i, 0).toString());

        // Populate Vaccine Status
        
        String vacStatus = model.getValueAt(i,2).toString();
        
        vacStatusYesBtn.setEnabled(true);
        vacStatusNoBtn.setEnabled(true);

        switch(vacStatus) {

            case "Yes" : 
                vacStatusYesBtn.setSelected(true);
                vacStatusNoBtn.setSelected(false);
                vacDateField.setEnabled(true);
                break;
                
            case "No" : 
                vacStatusYesBtn.setSelected(false);
                vacStatusNoBtn.setSelected(true);
                vacDateField.setEnabled(false);
                break;
        }
        
        // Populate Vaccine Date
        
        String strVacDate = model.getValueAt(i,3).toString();

        try {
            java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(strVacDate);            
            vacDateField.setDate(date); 
        } 
        
        catch (ParseException ex) {
            Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Populate Infection Status
        
        String infStatus = model.getValueAt(i,5).toString();
        
        infStatusYesBtn.setEnabled(true);
        infStatusNoBtn.setEnabled(true);

        switch(infStatus) {

            case "Yes" : 
                infStatusYesBtn.setSelected(true);
                infStatusNoBtn.setSelected(false);
                infDateField.setEnabled(true);
                break;
                
            case "No" : 
                infStatusYesBtn.setSelected(false);
                infStatusNoBtn.setSelected(true);
                infDateField.setEnabled(false);
                break;
        }
        
        // Populate Infection Date
        
        String strInfDate = model.getValueAt(i,6).toString();
        
        try {
            java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(strInfDate);            
            infDateField.setDate(date); 
        } 
        
        catch (ParseException ex) {
            Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clickHealthRec

    private void logout(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logout
        // TODO add your handling code here:
        dispose();
        
        LoginPage lp = new LoginPage();
        lp.setVisible(true);
    }//GEN-LAST:event_logout

    private void vacStatusListener(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_vacStatusListener

        int state = evt.getStateChange();        

        // Get Vaccination Date from File
        
        int i = healthRecTable.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) healthRecTable.getModel();

        String recVacStatus = model.getValueAt(i,2).toString();
        
        String currentVacStatus;
        
        if (vacStatusYesBtn.isSelected())
            
            currentVacStatus = "Yes";
        
        else {
            
            currentVacStatus = "No";
        }
        
        // If User click/select Yes Btn
        // ... Enable vaccine date

        if (state == ItemEvent.SELECTED) {
            
            vacDateField.setEnabled(true);
        }

        // If User click/select No Btn
        // ... Disable vaccine date

        else {
            
            vacDateField.setEnabled(false);
        }

        // If User click Diff VStats Btn as Health Records
        // ... Disable infection fields

        if (!recVacStatus.equals(currentVacStatus)) {
            
            infStatusYesBtn.setEnabled(false);
            
            infStatusNoBtn.setEnabled(false);
            
            infDateField.setEnabled(false);
        }

        // If User click Same VStats Btn as Health Records
        // ... Enable infection fields

        else {
            
            infStatusYesBtn.setEnabled(true);
            
            infStatusNoBtn.setEnabled(true); 
            
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        
            String strInfDate = sdf.format(infDateField.getDate());
            
            if (!strInfDate.equals("01/01/1001")) {
                
                infDateField.setEnabled(true);
            }
        }
        
        // Populate Vaccine Date on Toggling VStats Btn
        // ... With vaccine date if any. Else today date

        String strVacDate = model.getValueAt(i,3).toString();

        if (currentVacStatus.equals("Yes")) {

            if (recVacStatus.equals("Yes")) {
                
                try {

                    java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(strVacDate);

                    vacDateField.setDate(date);  
                } 

                catch (ParseException ex) {

                    Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
                }     
            }
            
            else {

                try {
                                        
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");

                    LocalDate localDate = LocalDate.now();
                    
                    java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(dtf.format(localDate));

                    vacDateField.setDate(date);  
                } 

                catch (ParseException ex) {

                    Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
                }     
            }
        }

        else { // if (pageVStats.equals("N")) { 

            try {

                java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse("01/01/1001");

                vacDateField.setDate(date);  
            } 

            catch (ParseException ex) {

                Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_vacStatusListener

    private void infStatusListener(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_infStatusListener

        int state = evt.getStateChange();        

        // Get Vaccination Date from File
        
        int i = healthRecTable.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) healthRecTable.getModel();

        String recInfStatus = model.getValueAt(i,5).toString();
        
        String currentInfStatus;
        
        if (infStatusYesBtn.isSelected())
            
            currentInfStatus = "Yes";
        
        else {
            
            currentInfStatus = "No";
        }
        
        // If User click/select Yes Btn
        // ... Enable infection date

        if (state == ItemEvent.SELECTED) {
            
            infDateField.setEnabled(true);
        }

        // If User click/select No Btn
        // ... Disable infection date

        else {
            
            infDateField.setEnabled(false);
        }

        // If User click Diff IStats Btn as Health Records
        // ... Disable vaccination fields

        if (!recInfStatus.equals(currentInfStatus)) {
            
            vacStatusYesBtn.setEnabled(false);
            
            vacStatusNoBtn.setEnabled(false);
            
            vacDateField.setEnabled(false);
        }

        // If User click Same IStats Btn as Health Records
        // ... Enable vaccination fields

        else {
            
            vacStatusYesBtn.setEnabled(true);
            
            vacStatusNoBtn.setEnabled(true);
            
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        
            String strVacDate = sdf.format(vacDateField.getDate());
            
            if (!strVacDate.equals("01/01/1001")) {
                
                vacDateField.setEnabled(true);
            }
        }   
        
        // Populate Infection Date on Toggling IStats Btn
        // ... With infection date if any. Else today date
                
        String strInfDate = model.getValueAt(i,6).toString();

        if (currentInfStatus.equals("Yes")) {

            if (recInfStatus.equals("Yes")) {
                
                try {

                    java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(strInfDate);

                    infDateField.setDate(date);  
                } 

                catch (ParseException ex) {

                    Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
                }     
            }
            
            else {

                try {
                                        
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");

                    LocalDate localDate = LocalDate.now();
                    
                    java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse(dtf.format(localDate));

                    infDateField.setDate(date);  
                } 

                catch (ParseException ex) {

                    Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
                }     
            }
        }

        else { // if (pageIStats.equals("N")) { 

            try {

                java.util.Date date = new SimpleDateFormat("dd/MM/yyyy").parse("01/01/1001");

                infDateField.setDate(date);  
            } 

            catch (ParseException ex) {

                Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_infStatusListener

    private void sendExpAlert(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendExpAlert
        // TODO add your handling code here:
        SendExpAlertCtrler ec = new SendExpAlertCtrler();
        
        try {
            Set<String> expList = ec.sendExpAlert(expAlertDateField.getText());
            
            Iterator<String> i = expList.iterator();
        
            String message = "Exposure alert sent to:\n";
        
            while (i.hasNext()){
                message += "- " + i.next() + "\n";
            }
            
            JOptionPane.showMessageDialog(this, message);
                        
        } catch (IOException ex) {
            Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(HealthStaffPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendExpAlert
    
    private void showHealthRec() throws IOException {

        DefaultTableModel model = (DefaultTableModel) healthRecTable.getModel();
        
        ShowHealthRecCtrler dc = new ShowHealthRecCtrler();
       
        ArrayList<PublicUser> userList = dc.showHealthRec();
        
        Object rowData[] = new Object[7];
        
        for (PublicUser user : userList) {
                        
            rowData[0] = user.getUsername();
            rowData[1] = user.getVaccinatedBy();
            rowData[2] = user.getVacStatus();
            rowData[3] = user.getVacDate();
            rowData[4] = user.getDeterminedBy();
            rowData[5] = user.getInfStatus();
            rowData[6] = user.getInfDate();
            
            model.addRow(rowData);
        }
        
        // Show current exposure alert date
        Date date = new Date();
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        expAlertDateField.setText(formatter.format(date));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AdminPage().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel expAlertDateField;
    private javax.swing.JLabel expAlertDateLabel;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JTable healthRecTable;
    private javax.swing.JTextField hsUsernameField;
    private javax.swing.JLabel hsUsernameLabel;
    private com.toedter.calendar.JDateChooser infDateField;
    private javax.swing.JLabel infDateLabel;
    private javax.swing.JLabel infStatusLabel;
    private javax.swing.JRadioButton infStatusNoBtn;
    private javax.swing.JRadioButton infStatusYesBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JTextField puUsernameField;
    private javax.swing.JLabel puUsernameLabel;
    private javax.swing.JButton sendExpAlertBtn;
    private javax.swing.JButton updateBtn;
    private com.toedter.calendar.JDateChooser vacDateField;
    private javax.swing.JLabel vacDateLabel;
    private javax.swing.JLabel vacStatusLabel;
    private javax.swing.JRadioButton vacStatusNoBtn;
    private javax.swing.JRadioButton vacStatusYesBtn;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
